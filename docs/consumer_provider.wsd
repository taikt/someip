' Option 2
@startuml
!pragma teoz true
autonumber

    box "Consumer\n"
    participant "Consumer" as con

    participant "CommonAPI" as com1
    participant "someip" as vsome1
    end box
    'participant "someip CommonAPI" as scom

    
    participant "vsomeip(router)" as router
    
    box "Provider\n"

    box "someip lib\n"
    participant "main thread" as vsome2
    participant "dispatcher thread" as dis2
    end box

    participant "CommonAPI" as com2
    participant "Provider" as pro
    
    end box 

    con -> com1: Runtime()
    con -> com1: buildProxy()
    com1 -> com1: createProxy()
    com1 -> com1: requestService()
    com1 -> vsome1: register_message_handler(&Connection::receive)
    com1 -> com1: createProxyHelper()
    con -> com1: registerProxyCreateMethod()

    con -> com1: getProxyStatusEvent().subscribe()
    com1 -> vsome1: registerAvailabilityHandler()


    pro -> com2: Runtime()
    pro -> com2: registerService()
    com2 -> vsome2: register_message_handler(&Connection::&receive)
    ' need to check this flow offer_service
    com2 -> vsome2: offer_service()
    vsome2 -> router: offer_service()
    router -> vsome1: on_availability()
    vsome1 -> com1: availability callback
    com1 -> con: on availability
    com2 -> com2: registerStub()
    com2 -> com2: registerStubHelper()
    com2 -> com2: registerStubAdapter()
 
    
    pro -> com2: registerStubAdapterCreateMethod()
    
    com2 -> com2: setStubMessageHandler()

    
   

    'pro -> con: ON_AVAILABLE

    con -> com1: foo()
    com1 -> vsome1: foo()
    vsome1 -> router: foo()
    router -> vsome2: on_message()
    vsome2 -> vsome2: push to handlers queue
    dis2 -> vsome2: get_next_handler()
    dis2 -> vsome2: invoke_handler()
    dis2 -> dis2: create timer (100ms)
    dis2 -> dis2: handle handler
    dis2 -> com2: Connection::receive()

    com2 -> com2: handleStubReceive()
    com2 -> com2: handleMessage()
    com2 -> com2: stubMessageHandler_()
    com2 -> pro: foo()

    alt if foo return before timer expired
    pro --> com2: 
    com2 --> dis2:
    dis2 -> dis2: cancel timer
    else if timer expired and foo is not return yet
    dis2 -> dis2: create new dispatcher thread (< max_threads)
    dis2 -> dis2: print blocking call

    end

    pro -> com2: reply()
    com2 -> vsome2: reply()
    vsome2 -> router: reply()
    router -> vsome1: on_message()
    vsome1 -> vsome1: invoke_handler()
    note over vsome1
    same as provider side
    end note
    vsome1 -> com1: Connection::receive()
    com1 -> com1: handleProxyReceive()
    com1 -> com1: onMessageReply()
    com1 -> con: reply()

@enduml



' provisioning issue

' Option 2
@startuml
!pragma teoz true
autonumber


    participant "ProvisioningD" as con

    
    box "Nad Manager\n"

    box "someip lib\n"
    participant "main thread" as vsome2
    participant "dispatcher thread" as dis2
    end box

    participant "Provisioning" as pro
    end box 


    participant "Nad Proxy" as proxy

    loop
    con -> vsome2: broadcast sections
    end loop

    vsome2 -> vsome2: push message to handlers queue
    dis2 -> vsome2: get_next_handler()
    dis2 -> vsome2: invoke_handler()
    dis2 -> dis2: create timer (100ms)
    dis2 -> dis2: handle handler
    dis2 -> pro: send sections
    pro -> proxy: send sections
    alt if send_sections() return before timer expired
    
    proxy --> pro:
    pro --> dis2: 
    dis2 -> dis2: cancel timer
    else if timer expired and send_sections() is not return yet
    dis2 -> dis2: create new dispatcher thread (< max_threads)
    dis2 -> dis2: print blocking call

    end

@enduml


' Option 3
@startuml
!pragma teoz true
autonumber


    participant "ProvisioningD" as con

    
    box "Nad Manager\n"

    box "someip lib\n"
    participant "main thread" as vsome2
    participant "dispatcher thread" as dis2
    end box

    participant "Provisioning" as pro
    end box 

    == startup Nad Manager ==
    note over vsome2, pro
    Nad Manager initialize sub modules (provisioning, coding, diagnostic..)
    => very high work load
    end note
    loop
    con -> vsome2: broadcast sections
    end loop

    vsome2 -> vsome2: push message to handlers queue
    dis2 -> vsome2: get_next_handler()
    dis2 -> vsome2: invoke_handler()
    dis2 -> dis2: create timer (100ms)
    dis2 -> dis2: handle handler
    dis2 -> pro: send sections
    note over pro
    due to NadManage is hang, this call is delayed
    end note
    alt if send_sections() return before timer expired
    
    pro --> dis2: 
    dis2 -> dis2: cancel timer
    else if timer expired and send_sections() is not return yet
    dis2 -> dis2: create new dispatcher thread (< max_threads)
    dis2 -> dis2: print blocking call

    end

@enduml