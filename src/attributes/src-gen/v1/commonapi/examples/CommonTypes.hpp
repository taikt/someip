/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_EXAMPLES_Common_Types_HPP_
#define V1_COMMONAPI_EXAMPLES_Common_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace examples {

struct CommonTypes {
    struct a2Struct : CommonAPI::Struct< int32_t, bool, double> {
    
        a2Struct()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = 0.0;
        }
        a2Struct(const int32_t &_a, const bool &_b, const double &_d)
        {
            std::get< 0>(values_) = _a;
            std::get< 1>(values_) = _b;
            std::get< 2>(values_) = _d;
        }
        inline const int32_t &getA() const { return std::get< 0>(values_); }
        inline void setA(const int32_t &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getB() const { return std::get< 1>(values_); }
        inline void setB(const bool _value) { std::get< 1>(values_) = _value; }
        inline const double &getD() const { return std::get< 2>(values_); }
        inline void setD(const double &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const a2Struct& _other) const {
        return (getA() == _other.getA() && getB() == _other.getB() && getD() == _other.getD());
        }
        inline bool operator!=(const a2Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct a1Struct : CommonAPI::Struct< std::string, a2Struct> {
    
        a1Struct()
        {
            std::get< 0>(values_) = "";
            std::get< 1>(values_) = a2Struct();
        }
        a1Struct(const std::string &_s, const a2Struct &_a2)
        {
            std::get< 0>(values_) = _s;
            std::get< 1>(values_) = _a2;
        }
        inline const std::string &getS() const { return std::get< 0>(values_); }
        inline void setS(const std::string &_value) { std::get< 0>(values_) = _value; }
        inline const a2Struct &getA2() const { return std::get< 1>(values_); }
        inline void setA2(const a2Struct &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const a1Struct& _other) const {
        return (getS() == _other.getS() && getA2() == _other.getA2());
        }
        inline bool operator!=(const a1Struct &_other) const {
            return !((*this) == _other);
        }
    
    };


static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "commonapi.examples.CommonTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct CommonTypes

} // namespace examples
} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_EXAMPLES_Common_Types_HPP_
